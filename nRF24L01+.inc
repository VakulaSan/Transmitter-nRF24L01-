.equ R_REGISTER          =  0x00 // + n Прочитать регистр n
.equ W_REGISTER          =  0x20 // + n Записать регистр n
.equ R_RX_PAYLOAD        =  0x61 // Принять данные данные из верхнего слота очереди приёмника. 
.equ W_TX_PAYLOAD        =  0xA0 // Записать в очередь передатчика данные для отправки
.equ FLUSH_TX            =  0xE1 // Сбросить очередь передатчика
.equ FLUSH_RX            =  0xE2 // Сбросить очередь приёмника
.equ REUSE_TX_PL         =  0xE3 // Использовать повторно последний переданный пакет
.equ R_RX_PL_WID         =  0x60 // Прочитать размер данных принятого пакета в начале очереди приёмника. 
.equ W_ACK_PAYLOAD       =  0xA8 // + p Записать данные для отправки с пакетом подтверждения по каналу p. 
.equ W_TX_PAYLOAD_NOACK  =  0xB0 // Записать в очередь передатчика данные, для отправки без подтверждения
.equ NOP_                =  0xFF // Нет операции. Может быть использовано для чтения регистра статуса

/* Регистры */

.equ CONFIG      =  0x00 // Регистр настроек
.equ EN_AA       =  0x01 // Выбор автоподтверждения
.equ EN_RXADDR   =  0x02 // Выбор каналов приёмника
.equ SETUP_AW    =  0x03 // Настройка размера адреса
.equ SETUP_RETR  =  0x04 // Настройка повторной отправки
.equ RF_CH       =  0x05 // Номер радиоканала, на котором осуществляется работа. От 0 до 125. 
.equ RF_SETUP    =  0x06 // Настройка радиоканала
.equ STATUS      =  0x07 // Регистр статуса. 
.equ OBSERVE_TX  =  0x08 // Количество повторов передачи и потерянных пакетов
.equ RPD         =  0x09 // Мощность принимаемого сигнала. Если младший бит = 1, то уровень более -64dBm 
.equ RX_ADDR_P0  =  0x0A // 3-5 байт (начиная с младшего байта). Адрес канала 0 приёмника. 
.equ RX_ADDR_P1  =  0x0B // 3-5 байт (начиная с младшего байта). Адрес канала 1 приёмника.
.equ RX_ADDR_P2  =  0x0C // Младший байт адреса канала 2 приёмника. Старшие байты из RX_ADDR_P1
.equ RX_ADDR_P3  =  0x0D // Младший байт адреса канала 3 приёмника. Старшие байты из RX_ADDR_P1
.equ RX_ADDR_P4  =  0x0E // Младший байт адреса канала 4 приёмника. Старшие байты из RX_ADDR_P1
.equ RX_ADDR_P5  =  0x0F // Младший байт адреса канала 5 приёмника. Старшие байты из RX_ADDR_P1
.equ TX_ADDR     =  0x10 // 3-5 байт (начиная с младшего байта). Адрес удалённого устройства для передачи
.equ RX_PW_P0    =  0x11 // Размер данных при приёме по каналу 0: от 1 до 32. 0 - канал не используется.
.equ RX_PW_P1    =  0x12 // Размер данных при приёме по каналу 1: от 1 до 32. 0 - канал не используется.
.equ RX_PW_P2    =  0x13 // Размер данных при приёме по каналу 2: от 1 до 32. 0 - канал не используется.
.equ RX_PW_P3    =  0x14 // Размер данных при приёме по каналу 3: от 1 до 32. 0 - канал не используется.
.equ RX_PW_P4    =  0x15 // Размер данных при приёме по каналу 4: от 1 до 32. 0 - канал не используется.
.equ RX_PW_P5    =  0x16 // Размер данных при приёме по каналу 5: от 1 до 32. 0 - канал не используется.
.equ FIFO_STATUS  = 0x17 // Состояние очередей FIFO приёмника и передатчика
.equ DYNPD       =  0x1C // Выбор каналов приёмника для которых используется произвольная длина пакетов.
.equ FEATURE     =  0x1D // Регистр опций


/* Биты регистров */

// CONFIG
.equ MASK_RX_DR   = 6 // Запрещает прерывание по RX_DR (получение пакета)
.equ MASK_TX_DS   = 5 // Запрещает прерывание по TX_DS (завершение отправки пакета) 
.equ MASK_MAX_RT  = 4 // Запрещает прерывание по MAX_RT (превышение числа повторных попыток отправки) 
.equ EN_CRC       = 3 // Включает CRC
.equ CRCO         = 2 // Размер поля CRC: 0 - 1 байт; 1 - 2 байта
.equ PWR_UP       = 1 // Включение питания
.equ PRIM_RX      = 0 // Выбор режима: 0 - PTX (передатчик) 1 - PRX (приёмник)

// EN_AA
.equ ENAA_P5  = 5 // Включает автоподтверждение данных, полученных по каналу 5
.equ ENAA_P4  = 4 // Включает автоподтверждение данных, полученных по каналу 4
.equ ENAA_P3  = 3 // Включает автоподтверждение данных, полученных по каналу 3
.equ ENAA_P2  = 2 // Включает автоподтверждение данных, полученных по каналу 2
.equ ENAA_P1  = 1 // Включает автоподтверждение данных, полученных по каналу 1
.equ ENAA_P0  = 0 // Включает автоподтверждение данных, полученных по каналу 0

// EN_RXADDR
.equ ERX_P5  = 5 // Включает канал 5 приёмника
.equ ERX_P4  = 4 // Включает канал 4 приёмника 
.equ ERX_P3  = 3 // Включает канал 3 приёмника 
.equ ERX_P2  = 2 // Включает канал 2 приёмника 
.equ ERX_P1  = 1 // Включает канал 1 приёмника 
.equ ERX_P0  = 0 // Включает канал 0 приёмника 

// SETUP_AW
.equ AW  = 0 // Два бита, Выбирает ширину поля адреса: 1 - 3 байта; 2 - 4 байта; 3 - 5 байт.

.equ SETUP_AW_3BYTES_ADDRESS  = (1 << AW)
.equ SETUP_AW_4BYTES_ADDRESS  = (2 << AW)
.equ SETUP_AW_5BYTES_ADDRESS  = (3 << AW)

// SETUP_RETR 
.equ ARD  = 4 // 4 бита. Задаёт значение задержки перед повторной отправкой пакета: 250 x (n + 1) мкс
.equ ARC  = 0 // 4 битай. Количество повторных попыток отправки, 0 - повторная отправка отключена.

.equ SETUP_RETR_DELAY_250MKS   = (0 << ARD)
.equ SETUP_RETR_DELAY_500MKS   = (1 << ARD)
.equ SETUP_RETR_DELAY_750MKS   = (2 << ARD)
.equ SETUP_RETR_DELAY_1000MKS  = (3 << ARD)
.equ SETUP_RETR_DELAY_1250MKS  = (4 << ARD)
.equ SETUP_RETR_DELAY_1500MKS  = (5 << ARD)
.equ SETUP_RETR_DELAY_1750MKS  = (6 << ARD)
.equ SETUP_RETR_DELAY_2000MKS  = (7 << ARD)
.equ SETUP_RETR_DELAY_2250MKS  = (8 << ARD)
.equ SETUP_RETR_DELAY_2500MKS  = (9 << ARD)
.equ SETUP_RETR_DELAY_2750MKS  = (10 << ARD)
.equ SETUP_RETR_DELAY_3000MKS  = (11 << ARD)
.equ SETUP_RETR_DELAY_3250MKS  = (12 << ARD)
.equ SETUP_RETR_DELAY_3500MKS  = (13 << ARD)
.equ SETUP_RETR_DELAY_3750MKS  = (14 << ARD)
.equ SETUP_RETR_DELAY_4000MKS  = (15 << ARD)

.equ SETUP_RETR_NO_RETRANSMIT  = (0 << ARC)
.equ SETUP_RETR_UP_TO_1_RETRANSMIT  = (1 << ARC)
.equ SETUP_RETR_UP_TO_2_RETRANSMIT  = (2 << ARC)
.equ SETUP_RETR_UP_TO_3_RETRANSMIT  = (3 << ARC)
.equ SETUP_RETR_UP_TO_4_RETRANSMIT  = (4 << ARC)
.equ SETUP_RETR_UP_TO_5_RETRANSMIT  = (5 << ARC)
.equ SETUP_RETR_UP_TO_6_RETRANSMIT  = (6 << ARC)
.equ SETUP_RETR_UP_TO_7_RETRANSMIT  = (7 << ARC)
.equ SETUP_RETR_UP_TO_8_RETRANSMIT  = (8 << ARC)
.equ SETUP_RETR_UP_TO_9_RETRANSMIT  = (9 << ARC)
.equ SETUP_RETR_UP_TO_10_RETRANSMIT  = (10 << ARC)
.equ SETUP_RETR_UP_TO_11_RETRANSMIT  = (11 << ARC)
.equ SETUP_RETR_UP_TO_12_RETRANSMIT  = (12 << ARC)
.equ SETUP_RETR_UP_TO_13_RETRANSMIT  = (13 << ARC)
.equ SETUP_RETR_UP_TO_14_RETRANSMIT  = (14 << ARC)
.equ SETUP_RETR_UP_TO_15_RETRANSMIT  = (15 << ARC)

// RF_SETUP
.equ CONT_WAVE   =  7 // (Только для nRF24L01+) Непрерывная передача несущей (для тестов)
.equ RF_DR_LOW   =  5 // (Только для nRF24L01+) Включает скорость 250кбит/с. RF_DR_HIGH должен быть 0
.equ PLL_LOCK    =  4 // Для тестов
.equ RF_DR_HIGH  =  3 // Выбор скорости обмена (при значении бита RF_DR_LOW = 0): 0 - 1Мбит/с; 1 - 2Мбит/с
.equ RF_PWR      =  1 // 2бита. Выбирает мощность передатчика: 0 - -18dBm; 1 - -16dBm; 2 - -6dBm; 3 - 0dBm

.equ RF_SETUP_MINUS18DBM  = (0 << RF_PWR)
.equ RF_SETUP_MINUS12DBM  = (1 << RF_PWR)
.equ RF_SETUP_MINUS6DBM   = (2 << RF_PWR)
.equ RF_SETUP_0DBM        = (3 << RF_PWR)

.equ RF_SETUP_1MBPS  = (0 << RF_DR_HIGH)
.equ RF_SETUP_2MBPS  = (1 << RF_DR_HIGH)
.equ RF_SETUP_250KBPS  = (1 << RF_DR_LOW) // этот режим не должен использоваться с контролем доставки

// STATUS
.equ RX_DR    = 6 // Флаг получения новых данных в FIFO приёмника. Для сброса флага нужно записать 1
.equ TX_DS    = 5 // Флаг завершения передачи. Для сброса флага нужно записать 1
.equ MAX_RT   = 4 // Флаг превышения установленного числа повторов. Без сброса (записать 1) обмен невозможен
.equ RX_P_NO  = 1 // 3 бита. Номер канала, данные для которого доступны в FIFO приёмника. 7 -  FIFO пусто.
.equ TX_FULL_STATUS  = 0 // Признак заполнения FIFO передатчика: 1 - заполнено; 0 - есть доступные слоты 
        // (переименовано из TX_FULL во избежание путаницы с одноимённым битом из регистра FIFO_STATUS)

// OBSERVE_TX
.equ PLOS_CNT   = 4 // 4 бита. Общее количество пакетов без подтверждения. Сбрасывается записью RF_CH
.equ ARC_CNT    = 0 // 4 бита. Количество предпринятых повторов при последней отправке. 

// FIFO_STATUS
.equ TX_REUSE       = 6 // Признак готовности последнего пакета для повторной отправки. 
.equ TX_FULL_FIFO   = 5 // Флаг переполнения FIFO очереди передатчика.
        // (переименовано из TX_FULL во избежание путаницы с одноимённым битом из регистра STATUS)
.equ TX_EMPTY       = 4 // Флаг освобождения FIFO очереди передатчика.
.equ RX_FULL        = 1 // Флаг переполнения FIFO очереди приёмника.
.equ RX_EMPTY       = 0 // Флаг освобождения FIFO очереди приёмника.

// DYNDP
.equ DPL_P5  = 5 // Включает приём пакетов произвольной длины по каналу 5
.equ DPL_P4  = 4 // Включает приём пакетов произвольной длины по каналу 4
.equ DPL_P3  = 3 // Включает приём пакетов произвольной длины по каналу 3
.equ DPL_P2  = 2 // Включает приём пакетов произвольной длины по каналу 2
.equ DPL_P1  = 1 // Включает приём пакетов произвольной длины по каналу 1
.equ DPL_P0  = 0 // Включает приём пакетов произвольной длины по каналу 0

// FEATURE  
.equ EN_DPL       = 2 // Включает поддержку приёма и передачи пакетов произвольной длины
.equ EN_ACK_PAY   = 1 // Разрешает передачу данных с пакетами подтверждения приёма
.equ EN_DYN_ACK   = 0 // Разрешает использование W_TX_PAYLOAD_NOACK